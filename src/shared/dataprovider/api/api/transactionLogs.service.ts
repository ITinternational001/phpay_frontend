/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ProblemDetails } from '../model/problemDetails';
import { TransactionLogDTO } from '../model/transactionLogDTO';
import { TransactionSummaryDTO } from '../model/transactionSummaryDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { TransactionSummary } from '../model/transactionSummary';
import { ChannelTransactionSummary } from '../model/channelTransactionSummary';


@Injectable()
export class TransactionLogsService {

    protected basePath = environment.basePath;
     public token = sessionStorage.getItem("token") || '';
     public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



       /**
     * GetTransactionSummary API - retrieves the list of transaction logs summary.
     * 
     * @param clientId client ID parameter is REQUIRED for Client side only.
     * @param startDate Required startDate, Format YYYY-MM-DD, should be coupled with endDate
     * @param endDate Required EndDate, Format YYYY-MM-DD, should be coupled with startDate
     * @param status Required Status - CashinOutStatusEnum (1-Pending, 2-Cancelled, 3-Completed, 4-Rejected, 5-Closed)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
       public apiTransactionLogsExportTransactionLogToCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
       public apiTransactionLogsExportTransactionLogToCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
       public apiTransactionLogsExportTransactionLogToCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
       public apiTransactionLogsExportTransactionLogToCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
   

   
           let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
           if (clientId !== undefined && clientId !== null) {
               queryParameters = queryParameters.set('clientId', <any>clientId);
           }
           if (startDate !== undefined && startDate !== null) {
               queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
           }
           if (endDate !== undefined && endDate !== null) {
               queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
           }
           if (status !== undefined && status !== null) {
               queryParameters = queryParameters.set('status', <any>status);
           }
   
           let headers = this.defaultHeaders;
   
           // authentication (Bearer) required
           if (this.configuration.accessToken) {
               const accessToken = typeof this.configuration.accessToken === 'function'
                   ? this.configuration.accessToken()
                   : this.configuration.accessToken;
               headers = headers.set('Authorization', 'Bearer ' + accessToken);
           }
           // authentication (apiKey) required
           if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
               headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
           }
   
           // to determine the Accept header
           let httpHeaderAccepts: string[] = [
               'text/plain',
               'application/json',
               'text/json',
               'text/csv'
           ];
           const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
           if (httpHeaderAcceptSelected != undefined) {
               headers = headers.set('Accept', httpHeaderAcceptSelected);
           }
   
           // to determine the Content-Type header
           const consumes: string[] = [
           ];
   
           return this.httpClient.request<any>('get',`${this.basePath}/api/TransactionLogs/ExportTransactionLogToCSV`,
               {
                   params: queryParameters,
                   withCredentials: this.configuration.withCredentials,
                   headers: headers,
                   observe: observe,
                   reportProgress: reportProgress,
                   responseType: 'blob' as 'json'
               }
           );
       }


    /**
     * GetTransactionSummary API - retrieves the list of transaction logs summary.
     * 
     * @param clientId client ID parameter is REQUIRED for Client side only.
     * @param pageSize Optional pageSize parameter is defaulted to 100.
     * @param pageNumber Optional pageNumber parameter is defaulted to 1.
     * @param startDate Required startDate, Format YYYY-MM-DD, should be coupled with endDate
     * @param endDate Required EndDate, Format YYYY-MM-DD, should be coupled with startDate
     * @param status Status - CashinOutStatusEnum (0-All, 1-Pending, 2-Cancelled, 3-Completed, 4-Rejected, 5-Closed)
     * @param searchKeyword Optional search - Search by ClientName, SN/ReferenceUserId, InternalTransactionNumber
     * @param transactionType Transaction Type - (0-All, 1-Cash-In, 2-Cash-Out)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTransactionLogsGetTransactionSummaryGet(clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, transactionType?: number, observe?: 'body', reportProgress?: boolean): Observable<TransactionSummary>;
    public apiTransactionLogsGetTransactionSummaryGet(clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, transactionType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TransactionSummary>>;
    public apiTransactionLogsGetTransactionSummaryGet(clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, transactionType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TransactionSummary>>;
    public apiTransactionLogsGetTransactionSummaryGet(clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, transactionType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', <any>clientId);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', <any>transactionType);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TransactionSummary>('get',`${this.basePath}/api/TransactionLogs/GetTransactionSummary`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

 /**
     * GetTransactionSummary API - retrieves the list of transaction logs summary by channel.
     * 
     * @param channelId channel ID parameter is REQUIRED for Client side only.
     * @param clientId client ID parameter is REQUIRED for Client side only.
     * @param pageSize Optional pageSize parameter is defaulted to 100.
     * @param pageNumber Optional pageNumber parameter is defaulted to 1.
     * @param startDate Required startDate, Format YYYY-MM-DD, should be coupled with endDate
     * @param endDate Required EndDate, Format YYYY-MM-DD, should be coupled with startDate
     * @param status Status - CashinOutStatusEnum (0-All, 1-Pending, 2-Cancelled, 3-Completed, 4-Rejected, 5-Closed)
     * @param searchKeyword Optional search - Search by ClientName, SN/ReferenceUserId, InternaltransactionNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiTransactionLogsTransactionsSummaryChannelsChannelIdGet(channelId: number, clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, observe?: 'body', reportProgress?: boolean): Observable<ChannelTransactionSummary>;
 public apiTransactionLogsTransactionsSummaryChannelsChannelIdGet(channelId: number, clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChannelTransactionSummary>>;
 public apiTransactionLogsTransactionsSummaryChannelsChannelIdGet(channelId: number, clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChannelTransactionSummary>>;
 public apiTransactionLogsTransactionsSummaryChannelsChannelIdGet(channelId: number, clientId?: number, pageSize?: number, pageNumber?: number, startDate?: Date, endDate?: Date, status?: number, searchKeyword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

     if (channelId === null || channelId === undefined) {
         throw new Error('Required parameter channelId was null or undefined when calling apiTransactionLogsTransactionsSummaryChannelsChannelIdGet.');
     }








     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (clientId !== undefined && clientId !== null) {
         queryParameters = queryParameters.set('clientId', <any>clientId);
     }
     if (pageSize !== undefined && pageSize !== null) {
         queryParameters = queryParameters.set('pageSize', <any>pageSize);
     }
     if (pageNumber !== undefined && pageNumber !== null) {
         queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
     }
     if (startDate !== undefined && startDate !== null) {
         queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
     }
     if (endDate !== undefined && endDate !== null) {
         queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
     }
     if (status !== undefined && status !== null) {
         queryParameters = queryParameters.set('status', <any>status);
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<ChannelTransactionSummary>('get',`${this.basePath}/api/TransactionLogs/Transactions/Summary/Channels/${encodeURIComponent(String(channelId))}`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * Export transactionlogs to CSV (Single file but slow response).
     * 
     * @param clientId client ID parameter is REQUIRED for Client side only.
     * @param startDate Required startDate, Format YYYY-MM-DD, should be coupled with endDate
     * @param endDate Required EndDate, Format YYYY-MM-DD, should be coupled with startDate
     * @param status Required Status - CashinOutStatusEnum (1-Pending, 2-Cancelled, 3-Completed, 4-Rejected, 5-Closed 6-Reversed)
     * @param vendorId optional
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTransactionLogsExportTransactionLogCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, vendorId?: number, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiTransactionLogsExportTransactionLogCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, vendorId?: number, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiTransactionLogsExportTransactionLogCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, vendorId?: number, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiTransactionLogsExportTransactionLogCSVGet(clientId?: number, startDate?: Date, endDate?: Date, status?: number, vendorId?: number, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', <any>clientId);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (vendorId !== undefined && vendorId !== null) {
            queryParameters = queryParameters.set('vendorId', <any>vendorId);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0',
            'text/csv; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/TransactionLogs/Export/TransactionLog/CSV`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType: 'blob' as 'json'
            }
        );
    }

}
