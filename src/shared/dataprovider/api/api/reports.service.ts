/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { IncomeReport } from '../model/incomeReport';
 import { ProblemDetails } from '../model/problemDetails';
 import { SummaryReport } from '../model/summaryReport';
 import { TransactionReportRequestDTO } from '../model/transactionReportRequestDTO';
 import { WithdrawalHistoryReportRequestDTO } from '../model/withdrawalHistoryReportRequestDTO';
 import { WithdrawalsReport } from '../model/withdrawalsReport';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { ReportSummaryRequestDTO } from '../model/reportSummaryRequestDTO';
import { TopUpReportRequest } from '../model/topUpReportRequest';
import { TopUpSummaryReport } from '../model/topUpSummaryReport';
import { BalanceTransferDataDTO } from '../model/balanceTransferDataDTO';
import { GetListBalanceTransferRequestDTO } from '../model/getListBalanceTransferRequestDTO';
import { EODVendorSummaryReport } from '../model/eODVendorSummaryReport';
import { EODTransactionSummaryReport } from '../model/eODTransactionSummaryReport';
import { EODCOFReportSummary } from '../model/eODCOFReportSummary';
import { EODAgentCommsSummary } from '../model/eODAgentCommsSummary';
import { ProfitSummaryDTO } from '../model/profitSummaryDTO';

 
 
 @Injectable()
 export class ReportsService {
 
    protected basePath = environment.basePath;;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
     public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
   /**
     * GetSummaryReport API - Retrieves the list of Cashin/Cashout summary report.
     * 
     * @param body The request body contains the following: For Filtering
1. ClientId - Client&#x27;s id
2. TypeEnum ( 0 - All, 1 -  CashIn, 2 - CashOut, 3 - Remittance)
3. PaymentChannelId ( 0 -  All, Other numbers that are actual payment channel id )
4. StartDate - Start Date of Report
5. EndDate - End Date of Report
6. Status - CashinOutStatusEnum (0-All, 1-Pending, 2-Cancelled, 3-Completed, 4-Rejected, 5-Closed)

If request is null - returns all merchants transactions for 1 month.
If method&#x3D;0, merchantId&#x3D;0, type&#x3D;0 - returns client associated merchants transactions within the range of start/end date params.
     * @param pageSize Optional pageSize parameter is defaulted to 100.
     * @param pageNumber Optional pageNumber parameter is defaulted to 1.
     * @param searchKeyword 
     * @param generateCSV Optional generateCSV parameter is defaulted to false. If true, it will generate csv file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
public apiReportsGetSummaryReportPost(body?: ReportSummaryRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<SummaryReport>;
public apiReportsGetSummaryReportPost(body?: ReportSummaryRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SummaryReport>>;
public apiReportsGetSummaryReportPost(body?: ReportSummaryRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SummaryReport>>;
public apiReportsGetSummaryReportPost(body?: ReportSummaryRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (pageSize !== undefined && pageSize !== null) {
        queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }
    if (pageNumber !== undefined && pageNumber !== null) {
        queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
    }
    if (searchKeyword !== undefined && searchKeyword !== null) {
        queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
    }
    if (generateCSV !== undefined && generateCSV !== null) {
        queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
    }

    let headers = this.defaultHeaders;
     // Select the appropriate response type based on generateCSV
     const responseType =  generateCSV ? 'blob' as 'json' : 'json';

    // authentication (Bearer) required
    if (this.configuration.accessToken) {
        const accessToken = typeof this.configuration.accessToken === 'function'
            ? this.configuration.accessToken()
            : this.configuration.accessToken;
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (apiKey) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
        headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
        'text/csv'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json',
        'text/json',
        'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
        headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<SummaryReport>('post',`${this.basePath}/api/Reports/GetSummaryReport`,
        {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            responseType:responseType,
            reportProgress: reportProgress
        }
    );
}
    /**
     * Get The list of TopUp Transaction summary list
     * 
     * @param body The request body contains the following(Client side):  1. ClientId - Client&#x27;s id  2. StartDate - Start Date of Report  3. EndDate - End Date of Report  If request is null - (Mother side) returns all clients
     * @param pageSize Optional pageSize parameter is defaulted to 100.
     * @param pageNumber Optional pageNumber parameter is defaulted to 1.
     * @param status optional status [ 0 - All, 1 - Pending, 3 - Rejected, 4 - Completed ]
     * @param searchKeyword SearchKeywords: ClientName, Transaction Number, ReferenceNumber, UserName, Requestee
     * @param generateCSV boolean value, true, if generate csv, false, if do not generate csv
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetTopUpSummaryReportPost(body?: TopUpReportRequest, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TopUpSummaryReport>;
    public apiReportsGetTopUpSummaryReportPost(body?: TopUpReportRequest, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TopUpSummaryReport>>;
    public apiReportsGetTopUpSummaryReportPost(body?: TopUpReportRequest, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TopUpSummaryReport>>;
    public apiReportsGetTopUpSummaryReportPost(body?: TopUpReportRequest, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }

        let headers = this.defaultHeaders;
        // Select the appropriate response type based on generateCSV
        const responseType =  generateCSV ? 'blob' as 'json' : 'json';

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'text/csv',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TopUpSummaryReport>('post',`${this.basePath}/api/Reports/GetTopUpSummaryReport`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                responseType:responseType,
                reportProgress: reportProgress
            }
        );
    }

 /**
     * Retrieves the total income report
     * 
     * @param body The request body contains the following:
1. ClientId - Client&#x27;s id
2. TypeEnum ( 0 -  All, 1 -  CashIn, 2 - CashOut, 3 - Remittance )
3. PaymentChannelId ( 0 -  All, Other numbers that are actual payment channel id )
4. VendorId - Vendor&#x27;s Id
5. StartDate - Start Date of Report
6. EndDate - End Date of Report
     * @param pageSize Optional pageSize parameter is defaulted to 100.
     * @param pageNumber Optional pageNumber parameter is defaulted to 1.
     * @param searchKeyword 
     * @param generateCSV 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
public apiReportsGetTotalIncomeReportPost(body?: TransactionReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<IncomeReport>;
public apiReportsGetTotalIncomeReportPost(body?: TransactionReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IncomeReport>>;
public apiReportsGetTotalIncomeReportPost(body?: TransactionReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IncomeReport>>;
public apiReportsGetTotalIncomeReportPost(body?: TransactionReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (pageSize !== undefined && pageSize !== null) {
        queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }
    if (pageNumber !== undefined && pageNumber !== null) {
        queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
    }
    if (searchKeyword !== undefined && searchKeyword !== null) {
        queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
    }
    if (generateCSV !== undefined && generateCSV !== null) {
        queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
    }

    let headers = this.defaultHeaders;
     // Select the appropriate response type based on generateCSV
     const responseType =  generateCSV ? 'blob' as 'json' : 'json';

    // authentication (Bearer) required
    if (this.configuration.accessToken) {
        const accessToken = typeof this.configuration.accessToken === 'function'
            ? this.configuration.accessToken()
            : this.configuration.accessToken;
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (apiKey) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
        headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
        'text/csv', 
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json',
        'text/json',
        'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
        headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<IncomeReport>('post',`${this.basePath}/api/Reports/GetTotalIncomeReport`,
        {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            responseType:responseType,
            reportProgress: reportProgress
        }
    );
}

    /**
     * Retrieves the withdrawals per client report
     * 
     * @param body The request body contains the following:
1. ClientId - Client&#x27;s id
3. Method ( 1 - Bank, 2 - USDT, 3 - Cash Pick-up, 4 - E-wallet  )
5. StartDate - Start Date of Report
6. EndDate - End Date of Report
     * @param pageSize Optional pageSize parameter is defaulted to 100.
     * @param pageNumber Optional pageNumber parameter is defaulted to 1.
     * @param searchKeyword Search keyword
     * @param generateCSV Generate Csv
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
public apiReportsGetWithdrawalsReportPost(body?: WithdrawalHistoryReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
public apiReportsGetWithdrawalsReportPost(body?: WithdrawalHistoryReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
public apiReportsGetWithdrawalsReportPost(body?: WithdrawalHistoryReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
public apiReportsGetWithdrawalsReportPost(body?: WithdrawalHistoryReportRequestDTO, pageSize?: number, pageNumber?: number, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (pageSize !== undefined && pageSize !== null) {
        queryParameters = queryParameters.set('pageSize', <any>pageSize);
    }
    if (pageNumber !== undefined && pageNumber !== null) {
        queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
    }
    if (searchKeyword !== undefined && searchKeyword !== null) {
        queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
    }
    if (generateCSV !== undefined && generateCSV !== null) {
        queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
    }

    let headers = this.defaultHeaders;
     // Select the appropriate response type based on generateCSV
     const responseType =  generateCSV ? 'blob' as 'json' : 'json';

    // authentication (Bearer) required
    if (this.configuration.accessToken) {
        const accessToken = typeof this.configuration.accessToken === 'function'
            ? this.configuration.accessToken()
            : this.configuration.accessToken;
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (apiKey) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
        headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
        'text/csv', 
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json',
        'text/json',
        'application/_*+json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
        headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<any>('post',`${this.basePath}/api/Reports/GetWithdrawalsReport`,
        {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            responseType:responseType,
            reportProgress: reportProgress
        }
    );
}

    /**
     * Retrieves the list of balance transfer requests to fund the CO balance.   The transactions are generated from Client Channel Wallet balance into Remittance Wallet balance.
     * 
     * @param body The request body contains the following:
 1. ClientId - Client&#x27;s Id
 2. StartDate - start date of transaction filter
 2. EndDate - end date of transaction filter
     * @param pageSize 
     * @param pageNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetRequestFundForCOListPost(body?: GetListBalanceTransferRequestDTO, pageSize?: number, pageNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<BalanceTransferDataDTO>>;
 public apiReportsGetRequestFundForCOListPost(body?: GetListBalanceTransferRequestDTO, pageSize?: number, pageNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BalanceTransferDataDTO>>>;
 public apiReportsGetRequestFundForCOListPost(body?: GetListBalanceTransferRequestDTO, pageSize?: number, pageNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BalanceTransferDataDTO>>>;
 public apiReportsGetRequestFundForCOListPost(body?: GetListBalanceTransferRequestDTO, pageSize?: number, pageNumber?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (pageSize !== undefined && pageSize !== null) {
         queryParameters = queryParameters.set('pageSize', <any>pageSize);
     }
     if (pageNumber !== undefined && pageNumber !== null) {
         queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
         'application/json',
         'text/json',
         'application/_*+json'
     ];
     const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
     if (httpContentTypeSelected != undefined) {
         headers = headers.set('Content-Type', httpContentTypeSelected);
     }

     return this.httpClient.request<Array<BalanceTransferDataDTO>>('post',`${this.basePath}/api/Reports/GetRequestFundForCOList`,
         {
             body: body,
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD Vendor Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODVendorSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODVendorSummaryReport>;
 public apiReportsGetEODVendorSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODVendorSummaryReport>>;
 public apiReportsGetEODVendorSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODVendorSummaryReport>>;
 public apiReportsGetEODVendorSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODVendorSummaryReport>('get',`${this.basePath}/api/Reports/GetEODVendorSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD transaction Summary Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODTransactionSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODTransactionSummaryReport>;
 public apiReportsGetEODTransactionSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODTransactionSummaryReport>>;
 public apiReportsGetEODTransactionSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODTransactionSummaryReport>>;
 public apiReportsGetEODTransactionSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODTransactionSummaryReport>('get',`${this.basePath}/api/Reports/GetEODTransactionSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD COF Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODCOFSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODCOFReportSummary>;
 public apiReportsGetEODCOFSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODCOFReportSummary>>;
 public apiReportsGetEODCOFSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODCOFReportSummary>>;
 public apiReportsGetEODCOFSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODCOFReportSummary>('get',`${this.basePath}/api/Reports/GetEODCOFSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

/**
     * EOD Agent Commissions Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
public apiReportsGetEODAgentCommSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODAgentCommsSummary>;
public apiReportsGetEODAgentCommSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODAgentCommsSummary>>;
public apiReportsGetEODAgentCommSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODAgentCommsSummary>>;
public apiReportsGetEODAgentCommSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (today !== undefined && today !== null) {
        queryParameters = queryParameters.set('today', <any>today.toISOString());
    }
    if (searchKeyword !== undefined && searchKeyword !== null) {
        queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
    }
    if (generateCSV !== undefined && generateCSV !== null) {
        queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
    }

    let headers = this.defaultHeaders;

    // authentication (Bearer) required
    if (this.configuration.accessToken) {
        const accessToken = typeof this.configuration.accessToken === 'function'
            ? this.configuration.accessToken()
            : this.configuration.accessToken;
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (apiKey) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
        headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.request<EODAgentCommsSummary>('get',`${this.basePath}/api/Reports/GetEODAgentCommSummaryReport`,
        {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

 /**
     * EOD DPAY Transaction Summary Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODSummaryReportDPAYGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODVendorSummaryReport>;
 public apiReportsGetEODSummaryReportDPAYGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODVendorSummaryReport>>;
 public apiReportsGetEODSummaryReportDPAYGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODVendorSummaryReport>>;
 public apiReportsGetEODSummaryReportDPAYGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODVendorSummaryReport>('get',`${this.basePath}/api/Reports/GetEODSummaryReportDPAY`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD Vendor Cashin Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODVendorCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODVendorSummaryReport>;
 public apiReportsGetEODVendorCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODVendorSummaryReport>>;
 public apiReportsGetEODVendorCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODVendorSummaryReport>>;
 public apiReportsGetEODVendorCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODVendorSummaryReport>('get',`${this.basePath}/api/Reports/GetEODVendorCashinSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD Vendor Cashout Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODVendorCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODVendorSummaryReport>;
 public apiReportsGetEODVendorCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODVendorSummaryReport>>;
 public apiReportsGetEODVendorCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODVendorSummaryReport>>;
 public apiReportsGetEODVendorCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODVendorSummaryReport>('get',`${this.basePath}/api/Reports/GetEODVendorCashoutSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD Cashin transaction Summary Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODTransactionCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODTransactionSummaryReport>;
 public apiReportsGetEODTransactionCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODTransactionSummaryReport>>;
 public apiReportsGetEODTransactionCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODTransactionSummaryReport>>;
 public apiReportsGetEODTransactionCashinSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODTransactionSummaryReport>('get',`${this.basePath}/api/Reports/GetEODTransactionCashinSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * EOD Cashout transaction Summary Report
     * 
     * @param today Date today
     * @param searchKeyword search key
     * @param generateCSV not available
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiReportsGetEODTransactionCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'body', reportProgress?: boolean): Observable<EODTransactionSummaryReport>;
 public apiReportsGetEODTransactionCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODTransactionSummaryReport>>;
 public apiReportsGetEODTransactionCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODTransactionSummaryReport>>;
 public apiReportsGetEODTransactionCashoutSummaryReportGet(today?: Date, searchKeyword?: string, generateCSV?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (today !== undefined && today !== null) {
         queryParameters = queryParameters.set('today', <any>today.toISOString());
     }
     if (searchKeyword !== undefined && searchKeyword !== null) {
         queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
     }
     if (generateCSV !== undefined && generateCSV !== null) {
         queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
     }

     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<EODTransactionSummaryReport>('get',`${this.basePath}/api/Reports/GetEODTransactionCashoutSummaryReport`,
         {
             params: queryParameters,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * Report&gt;Running Balance&gt; Vendor Tab (updated to new UI)
     * 
     * @param startDate start date range
     * @param endDate end date range
     * @param searchKeyword search key
     * @param pageSize 
     * @param pageNumber 
     * @param generateCSV not available
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetVendorReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<EODVendorSummaryReport>;
    public apiReportsGetVendorReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODVendorSummaryReport>>;
    public apiReportsGetVendorReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODVendorSummaryReport>>;
    public apiReportsGetVendorReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EODVendorSummaryReport>('get',`${this.basePath}/api/Reports/GetVendorReportTab`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

/**
     * Report&gt;Running Balance&gt; Agent Comms Tab (updated to new UI)
     * 
     * @param startDate 
     * @param endDate 
     * @param searchKeyword search key
     * @param pageSize 
     * @param pageNumber 
     * @param generateCSV not available
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetAgentCommReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<EODAgentCommsSummary>;
    public apiReportsGetAgentCommReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODAgentCommsSummary>>;
    public apiReportsGetAgentCommReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODAgentCommsSummary>>;
    public apiReportsGetAgentCommReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EODAgentCommsSummary>('get',`${this.basePath}/api/Reports/GetAgentCommReportTab`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

 /**
     * Report&gt;Running Balance&gt; COF Tab (updated to new UI)
     * 
     * @param startDate start date range(not in used)
     * @param endDate end date range(not in used)
     * @param searchKeyword search key
     * @param pageSize 
     * @param pageNumber 
     * @param generateCSV not available
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetCOFReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<EODCOFReportSummary>;
    public apiReportsGetCOFReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODCOFReportSummary>>;
    public apiReportsGetCOFReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODCOFReportSummary>>;
    public apiReportsGetCOFReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EODCOFReportSummary>('get',`${this.basePath}/api/Reports/GetCOFReportTab`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

/**
     * Report&gt;Running Balance&gt; Deposit Tab (updated to new UI)
     * 
     * @param startDate start date range
     * @param endDate end date range
     * @param searchKeyword search key
     * @param pageSize 
     * @param pageNumber 
     * @param generateCSV not available
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetDepositReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<EODTransactionSummaryReport>;
    public apiReportsGetDepositReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODTransactionSummaryReport>>;
    public apiReportsGetDepositReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODTransactionSummaryReport>>;
    public apiReportsGetDepositReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EODTransactionSummaryReport>('get',`${this.basePath}/api/Reports/GetDepositReportTab`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

/**
     * Report&gt;Running Balance&gt; Profit Tab (updated to new UI)
     * 
     * @param startDate 
     * @param endDate 
     * @param searchKeyword search key
     * @param pageSize 
     * @param pageNumber 
     * @param generateCSV not available
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetProfitReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<ProfitSummaryDTO>;
    public apiReportsGetProfitReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProfitSummaryDTO>>;
    public apiReportsGetProfitReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProfitSummaryDTO>>;
    public apiReportsGetProfitReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ProfitSummaryDTO>('get',`${this.basePath}/api/Reports/GetProfitReportTab`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

 /**
     * Report&gt;Running Balance&gt; Withdrawal Tab (updated to new UI)
     * 
     * @param startDate start date range
     * @param endDate end date range
     * @param searchKeyword search key
     * @param pageSize 
     * @param pageNumber 
     * @param generateCSV not available
     * @param apiVersion The requested API version
     * @param xVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiReportsGetWithdrawalReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'body', reportProgress?: boolean): Observable<EODTransactionSummaryReport>;
    public apiReportsGetWithdrawalReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EODTransactionSummaryReport>>;
    public apiReportsGetWithdrawalReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EODTransactionSummaryReport>>;
    public apiReportsGetWithdrawalReportTabGet(startDate?: Date, endDate?: Date, searchKeyword?: string, pageSize?: number, pageNumber?: number, generateCSV?: boolean, apiVersion?: string, xVersion?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (generateCSV !== undefined && generateCSV !== null) {
            queryParameters = queryParameters.set('generateCSV', <any>generateCSV);
        }
        if (apiVersion !== undefined && apiVersion !== null) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;
        if (xVersion !== undefined && xVersion !== null) {
            headers = headers.set('X-Version', String(xVersion));
        }

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain; X-Version=1.0',
            'application/json; X-Version=1.0',
            'text/json; X-Version=1.0'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EODTransactionSummaryReport>('get',`${this.basePath}/api/Reports/GetWithdrawalReportTab`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }






}
