/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { CreateVendorRequestDTO } from '../model/createVendorRequestDTO';
 import { ProblemDetails } from '../model/problemDetails';
 import { UpdateVendorRequestDTO } from '../model/updateVendorRequestDTO';
 import { VendorDTO } from '../model/vendorDTO';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { VendorPrioRequestDTO } from '../model/vendorPrioRequestDTO';
import { VendorListDTO } from '../model/vendorListDTO';
 
 
 @Injectable()
 export class VendorsService {
 
    protected basePath = environment.basePath;
    public token = sessionStorage.getItem("token") || ''; 
    public defaultHeaders = new HttpHeaders({
       'X-API-KEY':environment.APIkey,
       'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
    public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
     /**
      * 
      * 
      * @param body 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiVendorsCreateVendorPost(body?: CreateVendorRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<VendorDTO>;
     public apiVendorsCreateVendorPost(body?: CreateVendorRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VendorDTO>>;
     public apiVendorsCreateVendorPost(body?: CreateVendorRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VendorDTO>>;
     public apiVendorsCreateVendorPost(body?: CreateVendorRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<VendorDTO>('post',`${this.basePath}/api/Vendors/CreateVendor`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * 
      * 
      * @param vendorId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiVendorsDeleteVendorPost(vendorId?: number, observe?: 'body', reportProgress?: boolean): Observable<VendorDTO>;
     public apiVendorsDeleteVendorPost(vendorId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VendorDTO>>;
     public apiVendorsDeleteVendorPost(vendorId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VendorDTO>>;
     public apiVendorsDeleteVendorPost(vendorId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (vendorId !== undefined && vendorId !== null) {
             queryParameters = queryParameters.set('vendorId', <any>vendorId);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<VendorDTO>('post',`${this.basePath}/api/Vendors/DeleteVendor`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
    /**
     * Retrieves a list of vendors
     * 
     * @param page Page number
     * @param limit Limit
     * @param searchKeyword Search Keyword. To  search from vendor&#x27;s name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiVendorsGetAllVendorsGet(page?: number, limit?: number, searchKeyword?: string, observe?: 'body', reportProgress?: boolean): Observable<VendorListDTO>;
    public apiVendorsGetAllVendorsGet(page?: number, limit?: number, searchKeyword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VendorListDTO>>;
    public apiVendorsGetAllVendorsGet(page?: number, limit?: number, searchKeyword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VendorListDTO>>;
    public apiVendorsGetAllVendorsGet(page?: number, limit?: number, searchKeyword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VendorListDTO>('get',`${this.basePath}/api/Vendors/GetAllVendors`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
 
     /**
      * 
      * 
      * @param vendorId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiVendorsGetVendorByIdGet(vendorId?: number, observe?: 'body', reportProgress?: boolean): Observable<VendorDTO>;
     public apiVendorsGetVendorByIdGet(vendorId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VendorDTO>>;
     public apiVendorsGetVendorByIdGet(vendorId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VendorDTO>>;
     public apiVendorsGetVendorByIdGet(vendorId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (vendorId !== undefined && vendorId !== null) {
             queryParameters = queryParameters.set('vendorId', <any>vendorId);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<VendorDTO>('get',`${this.basePath}/api/Vendors/GetVendorById`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * 
      * 
      * @param searchKeyword 
      * @param sort 
      * @param sortReverse 
      * @param page 
      * @param limit 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiVendorsGetVendorsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<VendorDTO>>;
     public apiVendorsGetVendorsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VendorDTO>>>;
     public apiVendorsGetVendorsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VendorDTO>>>;
     public apiVendorsGetVendorsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (searchKeyword !== undefined && searchKeyword !== null) {
             queryParameters = queryParameters.set('SearchKeyword', <any>searchKeyword);
         }
         if (sort !== undefined && sort !== null) {
             queryParameters = queryParameters.set('Sort', <any>sort);
         }
         if (sortReverse !== undefined && sortReverse !== null) {
             queryParameters = queryParameters.set('SortReverse', <any>sortReverse);
         }
         if (page !== undefined && page !== null) {
             queryParameters = queryParameters.set('Page', <any>page);
         }
         if (limit !== undefined && limit !== null) {
             queryParameters = queryParameters.set('Limit', <any>limit);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<Array<VendorDTO>>('get',`${this.basePath}/api/Vendors/GetVendorsByPage`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
    /**
     * Updates the information of a vendor
     * 
     * @param body The request body contains the following:
 1. Name
 2. SecretKey
 3. Status
 4. OutletHashId
 5. Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiVendorsUpdateVendorPost(body?: UpdateVendorRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<VendorDTO>;
 public apiVendorsUpdateVendorPost(body?: UpdateVendorRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VendorDTO>>;
 public apiVendorsUpdateVendorPost(body?: UpdateVendorRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VendorDTO>>;
 public apiVendorsUpdateVendorPost(body?: UpdateVendorRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
         'application/json',
         'text/json',
         'application/_*+json'
     ];
     const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
     if (httpContentTypeSelected != undefined) {
         headers = headers.set('Content-Type', httpContentTypeSelected);
     }

     return this.httpClient.request<VendorDTO>('post',`${this.basePath}/api/Vendors/UpdateVendor`,
         {
             body: body,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
     * udpate vendor&#x27;s priority
     * 
     * @param body You should pass all the Vendors Id and PriorityNumber in List format               {                \&quot;PriorityVendors\&quot;: [                  {                    \&quot;VendorId\&quot;: 1,                    \&quot;PriorityNumber\&quot;: 2                  },                  {                   \&quot;VendorId\&quot;: 2,                    \&quot;PriorityNumber\&quot;: 1                  },                  {                  \&quot;VendorId\&quot;: 3,                    \&quot;PriorityNumber\&quot;: 3                  },                  etc.....                ]              }
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public apiVendorsUpdatePriorityPost(body?: VendorPrioRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<VendorPrioRequestDTO>;
 public apiVendorsUpdatePriorityPost(body?: VendorPrioRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VendorPrioRequestDTO>>;
 public apiVendorsUpdatePriorityPost(body?: VendorPrioRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VendorPrioRequestDTO>>;
 public apiVendorsUpdatePriorityPost(body?: VendorPrioRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
         'application/json',
         'text/json',
         'application/_*+json'
     ];
     const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
     if (httpContentTypeSelected != undefined) {
         headers = headers.set('Content-Type', httpContentTypeSelected);
     }

     return this.httpClient.request<VendorPrioRequestDTO>('post',`${this.basePath}/api/Vendors/UpdatePriority`,
         {
             body: body,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 
 }
 