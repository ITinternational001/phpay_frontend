/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { AddPermissionsToRoleRequestDTO } from '../model/addPermissionsToRoleRequestDTO';
 import { CreatePermissionDTO } from '../model/createPermissionDTO';
 import { CreateRoleDTO } from '../model/createRoleDTO';
 import { DefaultRolePermission } from '../model/defaultRolePermission';
 import { Permission } from '../model/permission';
 import { PermissionDTO } from '../model/permissionDTO';
 import { PermissionUpdateDTO } from '../model/permissionUpdateDTO';
 import { Role } from '../model/role';
 import { UpdatePermissionDTO } from '../model/updatePermissionDTO';
 import { UpdatePermissionsToRoleRequestDTO } from '../model/updatePermissionsToRoleRequestDTO';
 import { UpdateRoleDto } from '../model/updateRoleDto';
 import { UserPermission } from '../model/userPermission';
 import { UserPermissionDTO } from '../model/userPermissionDTO';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
 
 
 @Injectable()
 export class RolePermissionService {
 
    protected basePath = environment.basePath;;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
     public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
     /**
      * Add permissions in Permission Master Data
      * 
      * @param body 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionAddPermissionPost(body?: CreatePermissionDTO, observe?: 'body', reportProgress?: boolean): Observable<Permission>;
     public apiRolePermissionAddPermissionPost(body?: CreatePermissionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Permission>>;
     public apiRolePermissionAddPermissionPost(body?: CreatePermissionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Permission>>;
     public apiRolePermissionAddPermissionPost(body?: CreatePermissionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<Permission>('post',`${this.basePath}/api/RolePermission/add/Permission`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Add of roles master data
      * 
      * @param body Required fields to be inputted by user
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionAddRolePost(body?: CreateRoleDTO, observe?: 'body', reportProgress?: boolean): Observable<Role>;
     public apiRolePermissionAddRolePost(body?: CreateRoleDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Role>>;
     public apiRolePermissionAddRolePost(body?: CreateRoleDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Role>>;
     public apiRolePermissionAddRolePost(body?: CreateRoleDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<Role>('post',`${this.basePath}/api/RolePermission/add/Role`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Assign default permissions to specific role
      * 
      * @param roleID require params
      * @param body collection of Permission IDs
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionAssignDefaultRolePermissionsRoleIDPost(roleID: number, body?: Array<AddPermissionsToRoleRequestDTO>, observe?: 'body', reportProgress?: boolean): Observable<Array<DefaultRolePermission>>;
     public apiRolePermissionAssignDefaultRolePermissionsRoleIDPost(roleID: number, body?: Array<AddPermissionsToRoleRequestDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DefaultRolePermission>>>;
     public apiRolePermissionAssignDefaultRolePermissionsRoleIDPost(roleID: number, body?: Array<AddPermissionsToRoleRequestDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DefaultRolePermission>>>;
     public apiRolePermissionAssignDefaultRolePermissionsRoleIDPost(roleID: number, body?: Array<AddPermissionsToRoleRequestDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (roleID === null || roleID === undefined) {
             throw new Error('Required parameter roleID was null or undefined when calling apiRolePermissionAssignDefaultRolePermissionsRoleIDPost.');
         }
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<Array<DefaultRolePermission>>('post',`${this.basePath}/api/RolePermission/assign-default-role-permissions/${encodeURIComponent(String(roleID))}`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Assign multiple permissions to user
      * 
      * @param userID required parameter
      * @param body Collections of Permission IDs
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionAssignUserPermissionUserIDPost(userID: number, body?: Array<UserPermissionDTO>, observe?: 'body', reportProgress?: boolean): Observable<Array<UserPermission>>;
     public apiRolePermissionAssignUserPermissionUserIDPost(userID: number, body?: Array<UserPermissionDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserPermission>>>;
     public apiRolePermissionAssignUserPermissionUserIDPost(userID: number, body?: Array<UserPermissionDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserPermission>>>;
     public apiRolePermissionAssignUserPermissionUserIDPost(userID: number, body?: Array<UserPermissionDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (userID === null || userID === undefined) {
             throw new Error('Required parameter userID was null or undefined when calling apiRolePermissionAssignUserPermissionUserIDPost.');
         }
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<Array<UserPermission>>('post',`${this.basePath}/api/RolePermission/assign-user-permission/${encodeURIComponent(String(userID))}`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Delete Assigned Default Permissions to role.
      * 
      * @param body Accepts an array of Primary Ids that you want to delete.
 e.g. [1,2,3,4]
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionDeleteDefaultRolePermissionsPost(body?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<DefaultRolePermission>>;
     public apiRolePermissionDeleteDefaultRolePermissionsPost(body?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DefaultRolePermission>>>;
     public apiRolePermissionDeleteDefaultRolePermissionsPost(body?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DefaultRolePermission>>>;
     public apiRolePermissionDeleteDefaultRolePermissionsPost(body?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<Array<DefaultRolePermission>>('post',`${this.basePath}/api/RolePermission/delete-default-role-permissions`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Retrieve the list of Permissions
      * 
      * @param pageSize Default:10
      * @param pageNumber Default:1
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionListPermissionsGet(pageSize?: number, pageNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Permission>>;
     public apiRolePermissionListPermissionsGet(pageSize?: number, pageNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Permission>>>;
     public apiRolePermissionListPermissionsGet(pageSize?: number, pageNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Permission>>>;
     public apiRolePermissionListPermissionsGet(pageSize?: number, pageNumber?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (pageNumber !== undefined && pageNumber !== null) {
             queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<Array<Permission>>('get',`${this.basePath}/api/RolePermission/list/permissions`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
     * Retrieve the list of Roles
     * 
     * @param pageSize Default:10
     * @param pageNumber Default:1
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRolePermissionListRolesGet(pageSize?: number, pageNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Role>>;
    public apiRolePermissionListRolesGet(pageSize?: number, pageNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Role>>>;
    public apiRolePermissionListRolesGet(pageSize?: number, pageNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Role>>>;
    public apiRolePermissionListRolesGet(pageSize?: number, pageNumber?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Role>>('get',`${this.basePath}/api/RolePermission/list/roles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
 
     /**
      * Retrieve the list of Permissions per Role
      * 
      * @param roleID Required params
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionRoleRoleIDGet(roleID: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DefaultRolePermission>>;
     public apiRolePermissionRoleRoleIDGet(roleID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DefaultRolePermission>>>;
     public apiRolePermissionRoleRoleIDGet(roleID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DefaultRolePermission>>>;
     public apiRolePermissionRoleRoleIDGet(roleID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (roleID === null || roleID === undefined) {
             throw new Error('Required parameter roleID was null or undefined when calling apiRolePermissionRoleRoleIDGet.');
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<Array<DefaultRolePermission>>('get',`${this.basePath}/api/RolePermission/role/${encodeURIComponent(String(roleID))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Update Assigned Default Permissions to role. (Enabled:true/false)
      * 
      * @param body 1. ID - This the column Id(primary key) that identifies each row.
 2. Enabled - Accepts value of true/false only
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionUpdateDefaultRolePermissionsPut(body?: Array<UpdatePermissionsToRoleRequestDTO>, observe?: 'body', reportProgress?: boolean): Observable<Array<DefaultRolePermission>>;
     public apiRolePermissionUpdateDefaultRolePermissionsPut(body?: Array<UpdatePermissionsToRoleRequestDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DefaultRolePermission>>>;
     public apiRolePermissionUpdateDefaultRolePermissionsPut(body?: Array<UpdatePermissionsToRoleRequestDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DefaultRolePermission>>>;
     public apiRolePermissionUpdateDefaultRolePermissionsPut(body?: Array<UpdatePermissionsToRoleRequestDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<Array<DefaultRolePermission>>('put',`${this.basePath}/api/RolePermission/update-default-role-permissions`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
   /**
     * Enabled/Disabled multiple permissions
     * 
     * @param userID User ID
     * @param body Permission IDs to enable/disable
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
   public apiRolePermissionUpdateMultiplePermissionsUserIDPost(userID: number, body?: Array<PermissionUpdateDTO>, observe?: 'body', reportProgress?: boolean): Observable<Array<PermissionUpdateDTO>>;
   public apiRolePermissionUpdateMultiplePermissionsUserIDPost(userID: number, body?: Array<PermissionUpdateDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PermissionUpdateDTO>>>;
   public apiRolePermissionUpdateMultiplePermissionsUserIDPost(userID: number, body?: Array<PermissionUpdateDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PermissionUpdateDTO>>>;
   public apiRolePermissionUpdateMultiplePermissionsUserIDPost(userID: number, body?: Array<PermissionUpdateDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       if (userID === null || userID === undefined) {
           throw new Error('Required parameter userID was null or undefined when calling apiRolePermissionUpdateMultiplePermissionsUserIDPost.');
       }


       let headers = this.defaultHeaders;

       // authentication (Bearer) required
       if (this.configuration.accessToken) {
           const accessToken = typeof this.configuration.accessToken === 'function'
               ? this.configuration.accessToken()
               : this.configuration.accessToken;
           headers = headers.set('Authorization', 'Bearer ' + accessToken);
       }
       // authentication (apiKey) required
       if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
           headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
       }

       // to determine the Accept header
       let httpHeaderAccepts: string[] = [
           'text/plain',
           'application/json',
           'text/json'
       ];
       const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
       if (httpHeaderAcceptSelected != undefined) {
           headers = headers.set('Accept', httpHeaderAcceptSelected);
       }

       // to determine the Content-Type header
       const consumes: string[] = [
           'application/json',
           'text/json',
           'application/_*+json'
       ];
       const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
       if (httpContentTypeSelected != undefined) {
           headers = headers.set('Content-Type', httpContentTypeSelected);
       }

       return this.httpClient.request<Array<PermissionUpdateDTO>>('post',`${this.basePath}/api/RolePermission/update-multiple-permissions/${encodeURIComponent(String(userID))}`,
           {
               body: body,
               withCredentials: this.configuration.withCredentials,
               headers: headers,
               observe: observe,
               reportProgress: reportProgress
           }
       );
   }
 
     /**
      * Update Permissions
      * 
      * @param permissionID Required params
      * @param body Fields to update
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionUpdatePermissionPermissionIDPut(permissionID: number, body?: UpdatePermissionDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public apiRolePermissionUpdatePermissionPermissionIDPut(permissionID: number, body?: UpdatePermissionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public apiRolePermissionUpdatePermissionPermissionIDPut(permissionID: number, body?: UpdatePermissionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public apiRolePermissionUpdatePermissionPermissionIDPut(permissionID: number, body?: UpdatePermissionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (permissionID === null || permissionID === undefined) {
             throw new Error('Required parameter permissionID was null or undefined when calling apiRolePermissionUpdatePermissionPermissionIDPut.');
         }
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<any>('put',`${this.basePath}/api/RolePermission/update/permission/${encodeURIComponent(String(permissionID))}`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Update roles
      * 
      * @param roleID Required field
      * @param body Fields to update
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionUpdateRoleRoleIDPut(roleID: number, body?: UpdateRoleDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public apiRolePermissionUpdateRoleRoleIDPut(roleID: number, body?: UpdateRoleDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public apiRolePermissionUpdateRoleRoleIDPut(roleID: number, body?: UpdateRoleDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public apiRolePermissionUpdateRoleRoleIDPut(roleID: number, body?: UpdateRoleDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (roleID === null || roleID === undefined) {
             throw new Error('Required parameter roleID was null or undefined when calling apiRolePermissionUpdateRoleRoleIDPut.');
         }
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<any>('put',`${this.basePath}/api/RolePermission/update/role/${encodeURIComponent(String(roleID))}`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Enabled/Disabled single permission
      * 
      * @param userID User ID
      * @param body Permission ID to enable/disable
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionUpdateSinglePermissionUserIDPost(userID: number, body?: PermissionUpdateDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
     public apiRolePermissionUpdateSinglePermissionUserIDPost(userID: number, body?: PermissionUpdateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
     public apiRolePermissionUpdateSinglePermissionUserIDPost(userID: number, body?: PermissionUpdateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
     public apiRolePermissionUpdateSinglePermissionUserIDPost(userID: number, body?: PermissionUpdateDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (userID === null || userID === undefined) {
             throw new Error('Required parameter userID was null or undefined when calling apiRolePermissionUpdateSinglePermissionUserIDPost.');
         }
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<any>('post',`${this.basePath}/api/RolePermission/update-single-permission/${encodeURIComponent(String(userID))}`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Retrieves list of permissions per user
      * 
      * @param userID Required params
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiRolePermissionUserUserIDGet(userID: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PermissionDTO>>;
     public apiRolePermissionUserUserIDGet(userID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PermissionDTO>>>;
     public apiRolePermissionUserUserIDGet(userID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PermissionDTO>>>;
     public apiRolePermissionUserUserIDGet(userID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (userID === null || userID === undefined) {
             throw new Error('Required parameter userID was null or undefined when calling apiRolePermissionUserUserIDGet.');
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<Array<PermissionDTO>>('get',`${this.basePath}/api/RolePermission/user/${encodeURIComponent(String(userID))}`,
             {
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 }
 