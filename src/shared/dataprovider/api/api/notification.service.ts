/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { MessageStatusEnum } from '../model/messageStatusEnum';
 import { MessagesDTO } from '../model/messagesDTO';
 import { ProblemDetails } from '../model/problemDetails';
 import { PushMessageRequest } from '../model/pushMessageRequest';
 import { PushNotificationMessage } from '../model/pushNotificationMessage';
 import { PushSubscriptionRequest } from '../model/pushSubscriptionRequest';
 import { SubscriptionDTO } from '../model/subscriptionDTO';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
 
 
 @Injectable()
 export class NotificationService {
 
    protected basePath = environment.basePath;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
     public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
     /**
      * 
      * 
      * @param userId 
      * @param status 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiNotificationMessageListGet(userId?: number, status?: MessageStatusEnum, observe?: 'body', reportProgress?: boolean): Observable<MessagesDTO>;
     public apiNotificationMessageListGet(userId?: number, status?: MessageStatusEnum, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessagesDTO>>;
     public apiNotificationMessageListGet(userId?: number, status?: MessageStatusEnum, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessagesDTO>>;
     public apiNotificationMessageListGet(userId?: number, status?: MessageStatusEnum, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (userId !== undefined && userId !== null) {
             queryParameters = queryParameters.set('userId', <any>userId);
         }
         if (status !== undefined && status !== null) {
             queryParameters = queryParameters.set('status', <any>status);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<MessagesDTO>('get',`${this.basePath}/api/Notification/Message/List`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Create Push Notification Message
      * 
      * @param body The Payload includes:
 1. UserID: Receiver of the Push Notification
 2. Message: Body of the Push Notification
 3. Title: Title of the Push Notification
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiNotificationMessageSendNotificationPost(body?: PushMessageRequest, observe?: 'body', reportProgress?: boolean): Observable<PushNotificationMessage>;
     public apiNotificationMessageSendNotificationPost(body?: PushMessageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PushNotificationMessage>>;
     public apiNotificationMessageSendNotificationPost(body?: PushMessageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PushNotificationMessage>>;
     public apiNotificationMessageSendNotificationPost(body?: PushMessageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<PushNotificationMessage>('post',`${this.basePath}/api/Notification/Message/SendNotification`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Update Message Status
      * 
      * @param id Required
      * @param status Required:(1-Unread, 2-Read, 3-Deleted)
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiNotificationMessageUpdateStatusPut(id?: number, status?: MessageStatusEnum, observe?: 'body', reportProgress?: boolean): Observable<PushNotificationMessage>;
     public apiNotificationMessageUpdateStatusPut(id?: number, status?: MessageStatusEnum, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PushNotificationMessage>>;
     public apiNotificationMessageUpdateStatusPut(id?: number, status?: MessageStatusEnum, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PushNotificationMessage>>;
     public apiNotificationMessageUpdateStatusPut(id?: number, status?: MessageStatusEnum, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (id !== undefined && id !== null) {
             queryParameters = queryParameters.set('id', <any>id);
         }
         if (status !== undefined && status !== null) {
             queryParameters = queryParameters.set('status', <any>status);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<PushNotificationMessage>('put',`${this.basePath}/api/Notification/Message/UpdateStatus`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Create/Update Push Subscription for Notification
      * 
      * @param body Required All
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiNotificationSubcriptionCreatePost(body?: PushSubscriptionRequest, observe?: 'body', reportProgress?: boolean): Observable<SubscriptionDTO>;
     public apiNotificationSubcriptionCreatePost(body?: PushSubscriptionRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubscriptionDTO>>;
     public apiNotificationSubcriptionCreatePost(body?: PushSubscriptionRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubscriptionDTO>>;
     public apiNotificationSubcriptionCreatePost(body?: PushSubscriptionRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<SubscriptionDTO>('post',`${this.basePath}/api/Notification/Subcription/Create`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 }
 