/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateMerchantWithFeesRequestDTO } from '../model/createMerchantWithFeesRequestDTO';
import { MerchantDTO } from '../model/configureFeeDTO';
import { ProblemDetails } from '../model/problemDetails';
import { StatusEnum } from '../model/statusEnum';
import { UpdateMerchantFeesRequestDTO } from '../model/updateMerchantFeesRequestDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { MerchantsListDTO } from '../model/merchantsListDTO';


@Injectable()
export class MerchantsService {

    protected basePath = environment.basePath;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a new merchant with its corresponding fees
     * 
     * @param body Request body contains the following:
1. Name - merchant&#x27;s name
2. ClientId - client&#x27;s id
3. PaymentChannelId - payment channel&#x27;s id (1 - GCash, 2 - Maya)
4. Status -  (1 - Active, 2 - Inactive, 3 - Deleted)
5. Fee - fee data
   5.1 Name - Fee&#x27;s Name
   5.2 TransactionType - (1 - CashIn, 2 -CashOut, 3 - Withdrawal)
   5.3 FeeOnTopPercent - Fee On Top in Percentage
   5.4 FeeOnTopFixed - Fee On Top in Fixed Amount
   5.5 FeeAtCostPercent - Fee At Cost in Percentage
   5.6 FeeAtCostFixed - Fee at Cost in Fixed Amount
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsCreateMerchantWithFeesPost(body?: CreateMerchantWithFeesRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<MerchantDTO>;
    public apiMerchantsCreateMerchantWithFeesPost(body?: CreateMerchantWithFeesRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MerchantDTO>>;
    public apiMerchantsCreateMerchantWithFeesPost(body?: CreateMerchantWithFeesRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MerchantDTO>>;
    public apiMerchantsCreateMerchantWithFeesPost(body?: CreateMerchantWithFeesRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<MerchantDTO>('post',`${this.basePath}/api/Merchants/CreateMerchantWithFees`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Soft delete the merchant
     * 
     * @param merchantId Merchant&#x27;s Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsDeleteMerchantPost(merchantId?: number, observe?: 'body', reportProgress?: boolean): Observable<MerchantDTO>;
    public apiMerchantsDeleteMerchantPost(merchantId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MerchantDTO>>;
    public apiMerchantsDeleteMerchantPost(merchantId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MerchantDTO>>;
    public apiMerchantsDeleteMerchantPost(merchantId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (merchantId !== undefined && merchantId !== null) {
            queryParameters = queryParameters.set('merchantId', <any>merchantId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MerchantDTO>('post',`${this.basePath}/api/Merchants/DeleteMerchant`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a list of active merchants
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsGetAllActiveMerchantsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<MerchantDTO>>;
    public apiMerchantsGetAllActiveMerchantsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MerchantDTO>>>;
    public apiMerchantsGetAllActiveMerchantsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MerchantDTO>>>;
    public apiMerchantsGetAllActiveMerchantsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MerchantDTO>>('get',`${this.basePath}/api/Merchants/GetAllActiveMerchants`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a list of merchants
     * 
     * @param skip 
     * @param take 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsGetAllMerchantsGet(skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MerchantDTO>>;
    public apiMerchantsGetAllMerchantsGet(skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MerchantDTO>>>;
    public apiMerchantsGetAllMerchantsGet(skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MerchantDTO>>>;
    public apiMerchantsGetAllMerchantsGet(skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (take !== undefined && take !== null) {
            queryParameters = queryParameters.set('take', <any>take);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MerchantDTO>>('get',`${this.basePath}/api/Merchants/GetAllMerchants`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve merchant&#x27;s information
     * 
     * @param merchantId Merchant&#x27;s Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsGetMerchantByIdGet(merchantId?: number, observe?: 'body', reportProgress?: boolean): Observable<MerchantDTO>;
    public apiMerchantsGetMerchantByIdGet(merchantId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MerchantDTO>>;
    public apiMerchantsGetMerchantByIdGet(merchantId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MerchantDTO>>;
    public apiMerchantsGetMerchantByIdGet(merchantId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (merchantId !== undefined && merchantId !== null) {
            queryParameters = queryParameters.set('merchantId', <any>merchantId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MerchantDTO>('get',`${this.basePath}/api/Merchants/GetMerchantById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve the list of fees associated to the merchant
     * 
     * @param merchantId Merchant&#x27;s Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsGetMerchantFeesByMerchantIdGet(merchantId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MerchantDTO>>;
    public apiMerchantsGetMerchantFeesByMerchantIdGet(merchantId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MerchantDTO>>>;
    public apiMerchantsGetMerchantFeesByMerchantIdGet(merchantId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MerchantDTO>>>;
    public apiMerchantsGetMerchantFeesByMerchantIdGet(merchantId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (merchantId !== undefined && merchantId !== null) {
            queryParameters = queryParameters.set('merchantId', <any>merchantId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MerchantDTO>>('get',`${this.basePath}/api/Merchants/GetMerchantFeesByMerchantId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * Retrieves a list of merchants, filtered by client
     * 
     * @param clientId Client&#x27;s id
     * @param pageSize Page Size
     * @param pageNumber Page Number
     * @param searchKeyword Search Keyowrd to search from Channel&#x27;s name or merchant name or client&#x27;s name or vendor&#x27;s name.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public apiMerchantsGetMerchantsByClientIdGet(clientId?: number, pageSize?: number, pageNumber?: number, searchKeyword?: string, observe?: 'body', reportProgress?: boolean): Observable<MerchantsListDTO>;
     public apiMerchantsGetMerchantsByClientIdGet(clientId?: number, pageSize?: number, pageNumber?: number, searchKeyword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MerchantsListDTO>>;
     public apiMerchantsGetMerchantsByClientIdGet(clientId?: number, pageSize?: number, pageNumber?: number, searchKeyword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MerchantsListDTO>>;
     public apiMerchantsGetMerchantsByClientIdGet(clientId?: number, pageSize?: number, pageNumber?: number, searchKeyword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
 
 
 
         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
         if (clientId !== undefined && clientId !== null) {
             queryParameters = queryParameters.set('clientId', <any>clientId);
         }
         if (pageSize !== undefined && pageSize !== null) {
             queryParameters = queryParameters.set('pageSize', <any>pageSize);
         }
         if (pageNumber !== undefined && pageNumber !== null) {
             queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
         }
         if (searchKeyword !== undefined && searchKeyword !== null) {
             queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
         }
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
         ];
 
         return this.httpClient.request<MerchantsListDTO>('get',`${this.basePath}/api/Merchants/GetMerchantsByClientId`,
             {
                 params: queryParameters,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

    /**
     * Retrieves a list of merchants
     * 
     * @param searchKeyword 
     * @param sort 
     * @param sortReverse 
     * @param page 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsGetMerchantsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MerchantDTO>>;
    public apiMerchantsGetMerchantsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MerchantDTO>>>;
    public apiMerchantsGetMerchantsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MerchantDTO>>>;
    public apiMerchantsGetMerchantsByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('SearchKeyword', <any>searchKeyword);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('Sort', <any>sort);
        }
        if (sortReverse !== undefined && sortReverse !== null) {
            queryParameters = queryParameters.set('SortReverse', <any>sortReverse);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('Page', <any>page);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('Limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<MerchantDTO>>('get',`${this.basePath}/api/Merchants/GetMerchantsByPage`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the status of the merchant
     * 
     * @param merchantId Merchant&#x27;s Id
     * @param statusEnum Status  (1 - Active, 2 - Inactive, 3 - Deleted)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsUpdateMerchantStatusPost(merchantId?: number, statusEnum?: StatusEnum, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public apiMerchantsUpdateMerchantStatusPost(merchantId?: number, statusEnum?: StatusEnum, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public apiMerchantsUpdateMerchantStatusPost(merchantId?: number, statusEnum?: StatusEnum, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public apiMerchantsUpdateMerchantStatusPost(merchantId?: number, statusEnum?: StatusEnum, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (merchantId !== undefined && merchantId !== null) {
            queryParameters = queryParameters.set('merchantId', <any>merchantId);
        }
        if (statusEnum !== undefined && statusEnum !== null) {
            queryParameters = queryParameters.set('statusEnum', <any>statusEnum);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('post',`${this.basePath}/api/Merchants/UpdateMerchantStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the merchant and its corresponding fee
     * 
     * @param body Request body contains the following:
1. Id - Merchant&#x27;s id
2. Name - merchant&#x27;s name
3. ClientId - client&#x27;s id
4. PaymentChannelId - payment channel&#x27;s id (1 - GCash, 2 - Maya)
5. Status -  (1 - Active, 2 - Inactive, 3 - Deleted)
6. Fee - fee data
   6.1 Id - Fee&#x27;s Id
   6.2 Name - Fee&#x27;s Name
   6.3 TransactionType - (1 - CashIn, 2 -CashOut, 3 - Withdrawal)
   6.4 FeeOnTopPercent - Fee On Top in Percentage
   6.6 FeeOnTopFixed - Fee On Top in Fixed Amount
   6.7 FeeAtCostPercent - Fee At Cost in Percentage
   6.8 FeeAtCostFixed - Fee at Cost in Fixed Amount
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiMerchantsUpdateMerchantWithFeesPost(body?: UpdateMerchantFeesRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<MerchantDTO>;
    public apiMerchantsUpdateMerchantWithFeesPost(body?: UpdateMerchantFeesRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MerchantDTO>>;
    public apiMerchantsUpdateMerchantWithFeesPost(body?: UpdateMerchantFeesRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MerchantDTO>>;
    public apiMerchantsUpdateMerchantWithFeesPost(body?: UpdateMerchantFeesRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<MerchantDTO>('post',`${this.basePath}/api/Merchants/UpdateMerchantWithFees`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
