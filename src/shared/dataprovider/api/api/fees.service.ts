/**
 * Dynasty Cash In Gateway
 * Dynasty Cash In API list
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CreateFeeRequestDTO } from '../model/createFeeRequestDTO';
import { FeeDTO } from '../model/feeDTO';
import { ProblemDetails } from '../model/problemDetails';
import { UpdateFeeRequestDTO } from '../model/updateFeeRequestDTO';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { environment } from 'src/environments/environment';


@Injectable()
export class FeesService {

    protected basePath = environment.basePath;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFeesCreateFeePost(body?: CreateFeeRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<FeeDTO>;
    public apiFeesCreateFeePost(body?: CreateFeeRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FeeDTO>>;
    public apiFeesCreateFeePost(body?: CreateFeeRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeeDTO>>;
    public apiFeesCreateFeePost(body?: CreateFeeRequestDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FeeDTO>('post', `${this.basePath}/api/Fees/CreateFee`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param skip 
     * @param take 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFeesGetAllFeesGet(skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<FeeDTO>>;
    public apiFeesGetAllFeesGet(skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FeeDTO>>>;
    public apiFeesGetAllFeesGet(skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FeeDTO>>>;
    public apiFeesGetAllFeesGet(skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (take !== undefined && take !== null) {
            queryParameters = queryParameters.set('take', <any>take);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<FeeDTO>>('get', `${this.basePath}/api/Fees/GetAllFees`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param feeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFeesGetFeeByIdGet(feeId?: number, observe?: 'body', reportProgress?: boolean): Observable<FeeDTO>;
    public apiFeesGetFeeByIdGet(feeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FeeDTO>>;
    public apiFeesGetFeeByIdGet(feeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeeDTO>>;
    public apiFeesGetFeeByIdGet(feeId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (feeId !== undefined && feeId !== null) {
            queryParameters = queryParameters.set('feeId', <any>feeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FeeDTO>('get', `${this.basePath}/api/Fees/GetFeeById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param searchKeyword 
     * @param sort 
     * @param sortReverse 
     * @param page 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFeesGetFeesByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<FeeDTO>>;
    public apiFeesGetFeesByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FeeDTO>>>;
    public apiFeesGetFeesByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FeeDTO>>>;
    public apiFeesGetFeesByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {






        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('SearchKeyword', <any>searchKeyword);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('Sort', <any>sort);
        }
        if (sortReverse !== undefined && sortReverse !== null) {
            queryParameters = queryParameters.set('SortReverse', <any>sortReverse);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('Page', <any>page);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('Limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<FeeDTO>>('get', `${this.basePath}/api/Fees/GetFeesByPage`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiFeesUpdateFeePost(body?: UpdateFeeRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<FeeDTO>;
    public apiFeesUpdateFeePost(body?: UpdateFeeRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FeeDTO>>;
    public apiFeesUpdateFeePost(body?: UpdateFeeRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeeDTO>>;
    public apiFeesUpdateFeePost(body?: UpdateFeeRequestDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FeeDTO>('post', `${this.basePath}/api/Fees/UpdateFee`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
