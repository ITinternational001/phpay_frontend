/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ProblemDetails } from '../model/problemDetails';
import { TransferFundsDTO } from '../model/transferFundsDTO';
import { UserCreateTransferFundsRequestDTO } from '../model/userCreateTransferFundsRequestDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { GetListTransferToRemittanceWalletDTO } from '../model/getListTransferToRemittanceWalletDTO';
import { RemittanceWalletTransferFundsDTO } from '../model/remittanceWalletTransferFundsDTO';
import { UserUpdateTransferFundsRequestDTO } from '../model/userUpdateTransferFundsRequestDTO';


@Injectable()
export class RemittanceService {
  createRemittance(remittanceValue: any): Observable<any> {
    throw new Error('Method not implemented.');
  }
  UserCreateTransferFundsRequestDTO(formValue: { Amount: number; ClientId: any; ChannelId: any; remarks: any; }): Observable<any> {
    throw new Error('Method not implemented.');
  }

    protected basePath = environment.basePath;;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get the list of transfer of funds from Channel wallet to remittance wallet, and from COF to remittance wallet.
     * 
     * @param body The request body contains the following:   1. Start  Date - Start Date of transaction.   2. End Date - End date of transaction   3. ClientId - Client Id. The client&#x27;s remittance wallet.
     * @param pageSize Page  Size
     * @param pageNumber Page Number
     * @param status 0-All, 1-Pending, 2-Approved, 3-Rejected, 4-Completed
     * @param searchKeyword Search keyword - to search in ReferenceUserId, TransactionNumber, Client&#x27;s Name
     * @param transferType optional Type              [0 - All, 6 - Wallet To Remittance Wallet,  8 - COF to Remittance Wallet]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiRemittanceTransferFundsListPost(body?: GetListTransferToRemittanceWalletDTO, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, transferType?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RemittanceWalletTransferFundsDTO>>;
    public apiRemittanceTransferFundsListPost(body?: GetListTransferToRemittanceWalletDTO, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, transferType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RemittanceWalletTransferFundsDTO>>>;
    public apiRemittanceTransferFundsListPost(body?: GetListTransferToRemittanceWalletDTO, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, transferType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RemittanceWalletTransferFundsDTO>>>;
    public apiRemittanceTransferFundsListPost(body?: GetListTransferToRemittanceWalletDTO, pageSize?: number, pageNumber?: number, status?: number, searchKeyword?: string, transferType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }
        if (transferType !== undefined && transferType !== null) {
            queryParameters = queryParameters.set('transferType', <any>transferType);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<RemittanceWalletTransferFundsDTO>>('post',`${this.basePath}/api/Remittance/TransferFundsList`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

 /**
  * Creates a new transfer of funds from Channel wallet to remittance wallet.
  * 
  * @param body The request body contains the following:
1. Channel Id - Channel Id. This is the source of funds.
2. Amount - Gross Amount to be cashed in
3. ClientId - Client Id. The client&#x27;s remittance wallet.
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */
 public apiRemittanceTransferFundsPost(body?: UserCreateTransferFundsRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<RemittanceWalletTransferFundsDTO>;
 public apiRemittanceTransferFundsPost(body?: UserCreateTransferFundsRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RemittanceWalletTransferFundsDTO>>;
 public apiRemittanceTransferFundsPost(body?: UserCreateTransferFundsRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RemittanceWalletTransferFundsDTO>>;
 public apiRemittanceTransferFundsPost(body?: UserCreateTransferFundsRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
         'application/json',
         'text/json',
         'application/_*+json'
     ];
     const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
     if (httpContentTypeSelected != undefined) {
         headers = headers.set('Content-Type', httpContentTypeSelected);
     }

     return this.httpClient.request<RemittanceWalletTransferFundsDTO>('post',`${this.basePath}/api/Remittance/TransferFunds`,
         {
             body: body,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

 /**
  * Updates a  transfer request to fund the remittance wallet.
  * 
  * @param body The request body contains the following:
1. TransactionNumber - Transaction Number of the request
2. Status - New Status of the transaction (2 - Approved, 3 - Rejected)
3. List of Sources
  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
  * @param reportProgress flag to report request and response progress.
  */
 public apiRemittanceTransferFundsPut(body?: UserUpdateTransferFundsRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<RemittanceWalletTransferFundsDTO>;
 public apiRemittanceTransferFundsPut(body?: UserUpdateTransferFundsRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RemittanceWalletTransferFundsDTO>>;
 public apiRemittanceTransferFundsPut(body?: UserUpdateTransferFundsRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RemittanceWalletTransferFundsDTO>>;
 public apiRemittanceTransferFundsPut(body?: UserUpdateTransferFundsRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


     let headers = this.defaultHeaders;

     // authentication (Bearer) required
     if (this.configuration.accessToken) {
         const accessToken = typeof this.configuration.accessToken === 'function'
             ? this.configuration.accessToken()
             : this.configuration.accessToken;
         headers = headers.set('Authorization', 'Bearer ' + accessToken);
     }
     // authentication (apiKey) required
     if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
         headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
     }

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
         'application/json',
         'text/json',
         'application/_*+json'
     ];
     const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
     if (httpContentTypeSelected != undefined) {
         headers = headers.set('Content-Type', httpContentTypeSelected);
     }

     return this.httpClient.request<RemittanceWalletTransferFundsDTO>('put',`${this.basePath}/api/Remittance/TransferFunds`,
         {
             body: body,
             withCredentials: this.configuration.withCredentials,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

}
