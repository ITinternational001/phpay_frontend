/**
 * Dynasty Cash In Gateway
 * Dynasty Cash In API list
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CreateProviderRequestDTO } from '../model/createProviderRequestDTO';
import { ProblemDetails } from '../model/problemDetails';
import { ProviderDTO } from '../model/providerDTO';
import { UpdateProviderRequestDTO } from '../model/updateProviderRequestDTO';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { environment } from 'src/environments/environment';
import { ProviderListDTO } from '../model/providerListDTO';


@Injectable()
export class ProvidersService {

    protected basePath = environment.basePath;;
    public token = sessionStorage.getItem("token") || '';
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY': environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
    });
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiProvidersCreateProviderPost(body?: CreateProviderRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<ProviderDTO>;
    public apiProvidersCreateProviderPost(body?: CreateProviderRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProviderDTO>>;
    public apiProvidersCreateProviderPost(body?: CreateProviderRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProviderDTO>>;
    public apiProvidersCreateProviderPost(body?: CreateProviderRequestDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ProviderDTO>('post', `${this.basePath}/api/Providers/CreateProvider`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a list of providers
     * 
     * @param pageSize 
     * @param pageNumber 
     * @param searchKeyword 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiProvidersGetAllProvidersGet(pageSize?: number, pageNumber?: number, searchKeyword?: string, observe?: 'body', reportProgress?: boolean): Observable<ProviderListDTO>;
    public apiProvidersGetAllProvidersGet(pageSize?: number, pageNumber?: number, searchKeyword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProviderListDTO>>;
    public apiProvidersGetAllProvidersGet(pageSize?: number, pageNumber?: number, searchKeyword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProviderListDTO>>;
    public apiProvidersGetAllProvidersGet(pageSize?: number, pageNumber?: number, searchKeyword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ProviderListDTO>('get',`${this.basePath}/api/Providers/GetAllProviders`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param providerId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiProvidersGetProviderByIdGet(providerId?: number, observe?: 'body', reportProgress?: boolean): Observable<ProviderDTO>;
    public apiProvidersGetProviderByIdGet(providerId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProviderDTO>>;
    public apiProvidersGetProviderByIdGet(providerId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProviderDTO>>;
    public apiProvidersGetProviderByIdGet(providerId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (providerId !== undefined && providerId !== null) {
            queryParameters = queryParameters.set('providerId', <any>providerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ProviderDTO>('get', `${this.basePath}/api/Providers/GetProviderById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param searchKeyword 
     * @param sort 
     * @param sortReverse 
     * @param page 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiProvidersGetProvidersByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ProviderDTO>>;
    public apiProvidersGetProvidersByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProviderDTO>>>;
    public apiProvidersGetProvidersByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProviderDTO>>>;
    public apiProvidersGetProvidersByPageGet(searchKeyword?: string, sort?: string, sortReverse?: boolean, page?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {






        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('SearchKeyword', <any>searchKeyword);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('Sort', <any>sort);
        }
        if (sortReverse !== undefined && sortReverse !== null) {
            queryParameters = queryParameters.set('SortReverse', <any>sortReverse);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('Page', <any>page);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('Limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ProviderDTO>>('get', `${this.basePath}/api/Providers/GetProvidersByPage`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiProvidersUpdateProviderPost(body?: UpdateProviderRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<ProviderDTO>;
    public apiProvidersUpdateProviderPost(body?: UpdateProviderRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProviderDTO>>;
    public apiProvidersUpdateProviderPost(body?: UpdateProviderRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProviderDTO>>;
    public apiProvidersUpdateProviderPost(body?: UpdateProviderRequestDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ProviderDTO>('post', `${this.basePath}/api/Providers/UpdateProvider`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
