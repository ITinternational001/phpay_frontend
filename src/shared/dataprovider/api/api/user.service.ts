/**
 * DynastyGateway API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

 import { Inject, Injectable, Optional }                      from '@angular/core';
 import { HttpClient, HttpHeaders, HttpParams,
          HttpResponse, HttpEvent }                           from '@angular/common/http';
 import { CustomHttpUrlEncodingCodec }                        from '../encoder';
 
 import { Observable }                                        from 'rxjs';
 
 import { CreateUserRequestDTO } from '../model/createUserRequestDTO';
 import { IPWhitelistDTO } from '../model/iPWhitelistDTO';
 import { ProblemDetails } from '../model/problemDetails';
 import { UserChangePasswordRequestDTO } from '../model/userChangePasswordRequestDTO';
 import { UserDTO } from '../model/userDTO';
 import { UserIPWhitelistRequestDTO } from '../model/userIPWhitelistRequestDTO';
 import { UserPasswordDTO } from '../model/userPasswordDTO';
 import { UserPasswordResetRequestDTO } from '../model/userPasswordResetRequestDTO';
 
 import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
 import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { UsersListDTO } from '../model/usersListDTO';
import { IPWhitelistResponseListDTO } from '../model/iPWhitelistResponseListDTO';
import { UserForgotPasswordRequestDTO } from '../model/userForgotPasswordRequestDTO';
import { UserPasswordResetDTO } from '../model/userPasswordResetDTO';
import { UpdateUserRequestDTO } from '../model/updateUserRequestDTO';
 
 @Injectable()
 export class UserService {
 
    protected basePath = environment.basePath;
    public token = sessionStorage.getItem("token") || ''; 
    public defaultHeaders = new HttpHeaders({
        'X-API-KEY':environment.APIkey,
        'Authorization': this.token ? `Bearer ${this.token}` : '',
     });
     public configuration = new Configuration();
 
     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
         if (basePath) {
             this.basePath = basePath;
         }
         if (configuration) {
             this.configuration = configuration;
             this.basePath = basePath || configuration.basePath || this.basePath;
         }
     }
 
     /**
      * @param consumes string[] mime-types
      * @return true: consumes contains 'multipart/form-data', false: otherwise
      */
     private canConsumeForm(consumes: string[]): boolean {
         const form = 'multipart/form-data';
         for (const consume of consumes) {
             if (form === consume) {
                 return true;
             }
         }
         return false;
     }
 
 
     /**
      * Create a new user for a client
      * 
      * @param body 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiUserCreateUserPost(body?: CreateUserRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<UserDTO>;
     public apiUserCreateUserPost(body?: CreateUserRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDTO>>;
     public apiUserCreateUserPost(body?: CreateUserRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDTO>>;
     public apiUserCreateUserPost(body?: CreateUserRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<UserDTO>('post',`${this.basePath}/api/User/CreateUser`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
    /**
     * Retrieve users of a client
     * 
     * @param clientId Client&#x27;s id
     * @param page Page Number
     * @param limit Max Number of records to be fetched
     * @param searchKeyword SearchKeywords: Name, Username and Email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUserFindUsersByClientIdGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe?: 'body', reportProgress?: boolean): Observable<UsersListDTO>;
    public apiUserFindUsersByClientIdGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsersListDTO>>;
    public apiUserFindUsersByClientIdGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsersListDTO>>;
    public apiUserFindUsersByClientIdGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', <any>clientId);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UsersListDTO>('get',`${this.basePath}/api/User/FindUsersByClientId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
 
    /**
     * Retrieve users of a client and their respective whitelisted Ips
     * 
     * @param clientId Client&#x27;s id
     * @param page Page Number
     * @param limit Max Number of records to be fetched
     * @param searchKeyword Search Keyword to search from username, client name, and role name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUserGetEnrolledUsersIPWhitelistGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe?: 'body', reportProgress?: boolean): Observable<IPWhitelistResponseListDTO>;
    public apiUserGetEnrolledUsersIPWhitelistGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IPWhitelistResponseListDTO>>;
    public apiUserGetEnrolledUsersIPWhitelistGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IPWhitelistResponseListDTO>>;
    public apiUserGetEnrolledUsersIPWhitelistGet(clientId?: number, page?: number, limit?: number, searchKeyword?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', <any>clientId);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (searchKeyword !== undefined && searchKeyword !== null) {
            queryParameters = queryParameters.set('searchKeyword', <any>searchKeyword);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IPWhitelistResponseListDTO>('get',`${this.basePath}/api/User/GetEnrolledUsersIPWhitelist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
 
     /**
      * Request IP whitelisting for a user, maximum of 3 ip addresses per user
      * 
      * @param body IP whitelist request
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiUserRegisterIPtoUserPost(body?: UserIPWhitelistRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<IPWhitelistDTO>;
     public apiUserRegisterIPtoUserPost(body?: UserIPWhitelistRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IPWhitelistDTO>>;
     public apiUserRegisterIPtoUserPost(body?: UserIPWhitelistRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IPWhitelistDTO>>;
     public apiUserRegisterIPtoUserPost(body?: UserIPWhitelistRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<IPWhitelistDTO>('post',`${this.basePath}/api/User/RegisterIPtoUser`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Password change
      * 
      * @param body The request body contains the following:
 1. Username
 2. OldPassword
 3. NewPassword
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public apiUserUpdatePasswordPost(body?: UserChangePasswordRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<UserPasswordDTO>;
     public apiUserUpdatePasswordPost(body?: UserChangePasswordRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPasswordDTO>>;
     public apiUserUpdatePasswordPost(body?: UserChangePasswordRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPasswordDTO>>;
     public apiUserUpdatePasswordPost(body?: UserChangePasswordRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // authentication (Bearer) required
         if (this.configuration.accessToken) {
             const accessToken = typeof this.configuration.accessToken === 'function'
                 ? this.configuration.accessToken()
                 : this.configuration.accessToken;
             headers = headers.set('Authorization', 'Bearer ' + accessToken);
         }
         // authentication (apiKey) required
         if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
             headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
         }
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
 
         return this.httpClient.request<UserPasswordDTO>('post',`${this.basePath}/api/User/UpdatePassword`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
     
        /**
     * Forgot Password; Authorized users only.
     * 
     * @param body The request body contains the following:
1. Username
2. NewTemporaryPassword
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUserForgotPasswordPost(body?: UserForgotPasswordRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<UserPasswordResetDTO>;
    public apiUserForgotPasswordPost(body?: UserForgotPasswordRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPasswordResetDTO>>;
    public apiUserForgotPasswordPost(body?: UserForgotPasswordRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPasswordResetDTO>>;
    public apiUserForgotPasswordPost(body?: UserForgotPasswordRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UserPasswordResetDTO>('post',`${this.basePath}/api/User/ForgotPassword`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update user of a client
     * 
     * @param body Add AgentType if IsAgent&#x3D;true
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUserUpdateUserPost(body?: UpdateUserRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<UserDTO>;
    public apiUserUpdateUserPost(body?: UpdateUserRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDTO>>;
    public apiUserUpdateUserPost(body?: UpdateUserRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDTO>>;
    public apiUserUpdateUserPost(body?: UpdateUserRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // authentication (apiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UserDTO>('post',`${this.basePath}/api/User/UpdateUser`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
  
 }
 